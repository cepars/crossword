class WordSearch {
  constructor({ grid, words, parentId, onFindWord }) {
    this.grid = grid;
    this.words = words;
    this.parentId = parentId;
    this.onFindWord = onFindWord;
    this.found = new Set();
    this.timing = [];
    this.start = Date.now();
    this.drawGrid();
  }

  drawGrid() {
    const parent = document.getElementById(this.parentId);
    let html = '<table style="margin:auto">';
    this.grid.forEach((row, i) => {
      html += '<tr>';
      row.forEach((letter, j) => {
        html += `<td id="cell-${i}-${j}" style="padding:5px;border:1px solid #ccc;font-size:20px;text-align:center;cursor:pointer">${letter}</td>`;
      });
      html += '</tr>';
    });
    html += '</table>';
    parent.innerHTML = html;
    this.enableClicks();
  }

  enableClicks() {
    const selected = [];
    this.grid.forEach((row, i) => {
      row.forEach((_, j) => {
        const cell = document.getElementById(`cell-${i}-${j}`);
        cell.addEventListener("click", () => {
          cell.style.backgroundColor = "yellow";
          selected.push({ i, j, l: cell.textContent });
          const str = selected.map(e => e.l).join("");
          this.words.forEach(word => {
            if (str.includes(word) && !this.found.has(word)) {
              this.found.add(word);
              this.timing.push((Date.now() - this.start) / 1000);
              if (this.onFindWord) this.onFindWord(word);
            }
          });
        });
      });
    });
  }

  getScore() {
    return this.found.size;
  }

  getTiming() {
    return this.timing;
  }
}
